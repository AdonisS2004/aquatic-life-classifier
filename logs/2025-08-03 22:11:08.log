08/03/2025 10:11:08 PM function setup_training_pipeline called with args 
08/03/2025 10:11:08 PM Device: cpu
08/03/2025 10:11:08 PM Batch size: 32
08/03/2025 10:11:08 PM Learning rate: 0.001
08/03/2025 10:11:08 PM Step 1: Creating data splits...
08/03/2025 10:11:25 PM Step 2: Creating data loaders...
08/03/2025 10:11:25 PM Step 3: Initializing model...
08/03/2025 10:11:25 PM Model running on CPU
08/03/2025 10:11:25 PM Step 4: Ready to start training!
08/03/2025 10:11:25 PM function train_model called with args AquaticLifeCNN(
  (feature_extractor): FeatureExtractor(
    (stage1): Sequential(
      (0): ConvBlock(
        (conv): Conv2d(3, 32, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (2): ConvBlock(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): ConvBlock(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (stage2): Sequential(
      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): ConvBlock(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): ConvBlock(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): ConvBlock(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (stage3): Sequential(
      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): ConvBlock(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): ConvBlock(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): ConvBlock(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (stage4): Sequential(
      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): ConvBlock(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): ConvBlock(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): ConvBlock(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (dropout): Dropout2d(p=0.1, inplace=False)
      )
    )
    (global_pool): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (classifier): Classifier(
    (stage1): Sequential(
      (0): Linear(in_features=512, out_features=256, bias=True)
      (1): ReLU(inplace=True)
      (2): Dropout(p=0.5, inplace=False)
    )
    (stage2): Sequential(
      (0): Linear(in_features=256, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Dropout(p=0.3, inplace=False)
    )
    (stage3): Sequential(
      (0): Linear(in_features=128, out_features=46, bias=True)
    )
  )
), <torch.utils.data.dataloader.DataLoader object at 0x19c82a3d0>, <torch.utils.data.dataloader.DataLoader object at 0x19f7b5070>
08/03/2025 10:11:58 PM Exception raised in train_model. exception: Torch not compiled with CUDA enabled
Traceback (most recent call last):
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/utils/management/decorators.py", line 57, in wrapper
    res = func(*args, *kwargs)
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/data_pipeline/pipeline_service.py", line 63, in train_model
    train_loss, train_acc = train_epoch(
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/data_pipeline/utils/data_helpers.py", line 302, in train_epoch
    images, labels = images.to(device), labels.to(device)
  File "/Users/adonisserrano/opt/anaconda3/envs/sea-life-classifier/lib/python3.9/site-packages/torch/cuda/__init__.py", line 310, in _lazy_init
    raise AssertionError("Torch not compiled with CUDA enabled")
AssertionError: Torch not compiled with CUDA enabled
08/03/2025 10:11:58 PM Exception raised in setup_training_pipeline. exception: Torch not compiled with CUDA enabled
Traceback (most recent call last):
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/utils/management/decorators.py", line 57, in wrapper
    res = func(*args, *kwargs)
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/data_pipeline/pipeline_service.py", line 172, in setup_training_pipeline
    train_model(model, train_loader, val_loader)
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/utils/management/decorators.py", line 67, in wrapper
    raise e
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/utils/management/decorators.py", line 57, in wrapper
    res = func(*args, *kwargs)
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/data_pipeline/pipeline_service.py", line 63, in train_model
    train_loss, train_acc = train_epoch(
  File "/Users/adonisserrano/Documents/GitHub/aquatic-life-classifier/src/data_pipeline/utils/data_helpers.py", line 302, in train_epoch
    images, labels = images.to(device), labels.to(device)
  File "/Users/adonisserrano/opt/anaconda3/envs/sea-life-classifier/lib/python3.9/site-packages/torch/cuda/__init__.py", line 310, in _lazy_init
    raise AssertionError("Torch not compiled with CUDA enabled")
AssertionError: Torch not compiled with CUDA enabled
